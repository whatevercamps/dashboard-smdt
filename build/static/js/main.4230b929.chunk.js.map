{"version":3,"sources":["Tweets/Tweets.jsx","Graph.jsx","NodeInfo.jsx","Main.jsx","App.js","serviceWorker.js","webpack:///./src/index.js?b635","logo.svg"],"names":["Tweets","props","updateDimensions","setState","tweetWidth","tweetsContainerRef","current","offsetWidth","componentDidUpdate","state","React","createRef","this","window","addEventListener","ref","className","style","width","title","ListGroup","overflow","height","tweets","map","tweet","index","Item","key","padding","tweetId","tweet_url","split","options","cards","lang","maxWidth","onLoad","tweetWidgetEl","setTweetsLoaded","tweetEl","shadowRoot","querySelector","Component","Graph","handleClick","node","changeSelectedNode","Card","bg","Body","graphData","DataGrafo","nodeLabel","onNodeClick","NodeInfo","Title","Text","Main","tweetsLoaded","selectedNode","graphDimensions","graphContainerRef","offsetHeight","active","spinner","text","Container","Row","marginBottom","marginTop","Col","TweetsBoli","TweetsCoca","TweetsPastillas","TweetsRitmo","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iRAyDeA,G,kBAnDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KASVC,iBAAmB,WACf,EAAKC,SAAS,CAAEC,WAAY,EAAKC,mBAAmBC,QAAU,EAAKD,mBAAmBC,QAAQC,YAAc,KAX7F,EAcnBC,mBAAqB,YACZ,EAAKC,MAAML,YAAc,EAAKC,mBAAmBC,SAClD,EAAKJ,oBAdT,EAAKO,MAAQ,CACTL,WAAY,MAGhB,EAAKC,mBAAqBK,IAAMC,YANjB,E,iFAoBfC,KAAKV,mBACLW,OAAOC,iBAAiB,SAAUF,KAAKV,oB,+BAGjC,IAAD,OACL,OACI,yBAAKa,IAAKH,KAAKP,mBAAoBW,UAAU,mBAAmBC,MAAOL,KAAKH,MAAML,WAAa,CAAEc,MAAON,KAAKH,MAAML,WAAa,MAAS,IACrI,4BAAKQ,KAAKX,MAAMkB,OAChB,kBAACC,EAAA,EAAD,CAAWH,MAAO,CAAEI,SAAU,SAAUC,OAAQ,SAC3CV,KAAKX,MAAMsB,QAAUX,KAAKH,MAAML,WAAaQ,KAAKX,MAAMsB,OAAOC,KAAI,SAACC,EAAOC,GACxE,OAAO,kBAACN,EAAA,EAAUO,KAAX,CAAgBC,IAAKF,EAAOT,MAAO,CAAEY,QAAS,IACjD,kBAAC,IAAD,CACIC,QAASL,EAAMM,UAAUC,MAAM,KAAK,GACpCC,QAAS,CAAEC,MAAO,SAAUhB,MAAO,EAAKT,MAAML,WAAa,EAAG+B,KAAM,KAAMC,SAAU,EAAK3B,MAAML,WAAa,GAC5GiC,OAAQ,SAAAC,GAEJ,GADA,EAAKrC,MAAMsC,kBACPD,EAAe,CACf,IAAME,EAAUF,EAAcG,WAAWC,cAAc,kBACvDF,EAAQvB,MAAMC,MAAS,EAAKT,MAAML,WAAa,EAAK,KACpDoC,EAAQvB,MAAMmB,SAAY,EAAK3B,MAAML,WAAa,EAAK,aAKtE,2C,GA9CJuC,c,yBCuBNC,E,2MApBXC,YAAc,SAAAC,GACV,EAAK7C,MAAM8C,mBAAmBD,I,wEAG9B,OACI,kBAACE,EAAA,EAAD,CAAMC,GAAG,SACL,kBAACD,EAAA,EAAKE,KAAN,CAAWjC,MAAO,CAACY,QAAS,IACxB,kBAAC,IAAD,CACIX,MAAON,KAAKX,MAAMiB,MAClBI,OAAQV,KAAKX,MAAMqB,OACnB6B,UAAWC,EACXC,UAAU,QACVC,YAAa1C,KAAKiC,oB,GAdtBF,aCcLY,E,iLAfP,OACI,6BACI,kBAACP,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKE,KAAN,KACI,kBAACF,EAAA,EAAKQ,MAAN,gCACA,kBAACR,EAAA,EAAKS,KAAN,KACK7C,KAAKX,MAAM6C,KAAOlC,KAAKX,MAAM6C,KAAK3B,MAAQ,0C,GARhDwB,a,yCCiFRe,E,YAvEX,WAAYzD,GAAQ,IAAD,8BACf,4CAAMA,KAUVsC,gBAAkB,WACT,EAAK9B,MAAMkD,cACZ,EAAKxD,SAAS,CAAEwD,cAAc,KAbnB,EAenBZ,mBAAqB,SAAAD,GACjB,EAAK3C,SAAS,CAAEyD,aAAcd,KAhBf,EAmBnB5C,iBAAmB,WACf,EAAKC,SAAS,CAAE0D,gBAAiB,EAAKC,kBAAkBxD,QAAU,CAAEY,MAAO,EAAK4C,kBAAkBxD,QAAQC,YAAae,OAAQ,EAAKwC,kBAAkBxD,QAAQyD,cAAiB,CAAE7C,MAAO,EAAGI,OAAQ,MApBpL,EAuBnBd,mBAAqB,YACZ,EAAKC,MAAMoD,iBAAmB,EAAKC,kBAAkBxD,SACtD,EAAKJ,oBAvBT,EAAKO,MAAQ,CACToD,gBAAiB,KACjBD,aAAc,KACdD,cAAc,GAGlB,EAAKG,kBAAoBpD,IAAMC,YARhB,E,iFA6BfC,KAAKV,mBACLW,OAAOC,iBAAiB,SAAUF,KAAKV,oB,+BAIvC,OACI,6BACI,kBAAC,IAAD,CACI8D,QAASpD,KAAKH,MAAMkD,aACpBM,SAAO,EACPC,KAAK,sBAGT,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKpD,UAAU,QAAQC,MAAO,CAAEK,OAAQ,OAAQ+C,aAAc,MAAOC,UAAW,QAC5E,kBAACC,EAAA,EAAD,CAAKxD,IAAKH,KAAKkD,mBACVlD,KAAKH,MAAMoD,gBAAkB,kBAAC,EAAD,CAAO3C,MAAON,KAAKH,MAAMoD,gBAAgB3C,MAAOI,OAAQV,KAAKH,MAAMoD,gBAAgBvC,OAAQyB,mBAAoBnC,KAAKmC,qBAAyB,sCAE/K,kBAACwB,EAAA,EAAD,CAAKtD,MAAO,CAAEY,QAAS,SACnB,kBAAC,EAAD,CAAUiB,KAAMlC,KAAKH,MAAMmD,iBAGnC,kBAACQ,EAAA,EAAD,CAAKpD,UAAU,SAASC,MAAO,CAAEK,OAAQ,OAAQ+C,aAAc,MAAOC,UAAW,QAC7E,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAQhC,gBAAiB3B,KAAK2B,gBAAiBpB,MAAM,OAAOI,OAAQiD,KAExE,kBAACD,EAAA,EAAD,KACI,kBAAC,EAAD,CAAQhC,gBAAiB3B,KAAK2B,gBAAiBpB,MAAM,YAAYI,OAAQkD,KAE7E,kBAACF,EAAA,EAAD,KACI,kBAAC,EAAD,CAAQhC,gBAAiB3B,KAAK2B,gBAAiBpB,MAAM,YAAYI,OAAQmD,KAE7E,kBAACH,EAAA,EAAD,KACI,kBAAC,EAAD,CAAQhC,gBAAiB3B,KAAK2B,gBAAiBpB,MAAM,kBAAeI,OAAQoD,Y,GA/DrFhC,aCEJiC,MARf,WACE,OACE,yBAAK5D,UAAU,OACb,kBAAC,EAAD,QCIc6D,QACW,cAA7BhE,OAAOiE,SAASC,UAEe,UAA7BlE,OAAOiE,SAASC,UAEhBlE,OAAOiE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,m1tDErInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.4230b929.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { TwitterTweetEmbed } from 'react-twitter-embed'\nimport '../Tweet/Tweet.css'\nclass Tweets extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            tweetWidth: null\n        }\n\n        this.tweetsContainerRef = React.createRef();\n    }\n\n\n    updateDimensions = () => {\n        this.setState({ tweetWidth: this.tweetsContainerRef.current ? this.tweetsContainerRef.current.offsetWidth : 0 })\n    };\n\n    componentDidUpdate = () => {\n        if (!this.state.tweetWidth && this.tweetsContainerRef.current)\n            this.updateDimensions();\n    }\n\n    componentDidMount() {\n        this.updateDimensions();\n        window.addEventListener('resize', this.updateDimensions);\n    }\n\n    render() {\n        return (\n            <div ref={this.tweetsContainerRef} className=\"tweets-container\" style={this.state.tweetWidth ? { width: this.state.tweetWidth + 'px' } : {}}>\n                <h3>{this.props.title}</h3>\n                <ListGroup style={{ overflow: 'scroll', height: '50vh' }}>\n                    {this.props.tweets && this.state.tweetWidth ? this.props.tweets.map((tweet, index) => {\n                        return <ListGroup.Item key={index} style={{ padding: 0 }}>\n                            <TwitterTweetEmbed\n                                tweetId={tweet.tweet_url.split(\"/\")[3]}\n                                options={{ cards: 'hidden', width: this.state.tweetWidth - 5, lang: 'es', maxWidth: this.state.tweetWidth - 5 }}\n                                onLoad={tweetWidgetEl => {\n                                    this.props.setTweetsLoaded();\n                                    if (tweetWidgetEl) {\n                                        const tweetEl = tweetWidgetEl.shadowRoot.querySelector('.EmbeddedTweet')\n                                        tweetEl.style.width = (this.state.tweetWidth - 5) + 'px'\n                                        tweetEl.style.maxWidth = (this.state.tweetWidth - 5) + 'px'\n                                    }\n                                }}\n                            />\n                        </ListGroup.Item>\n                    }) : <></>}\n                </ListGroup>\n            </div>\n        );\n    }\n}\n\nexport default Tweets;","import React, { Component } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport DataGrafo from './jsons/red_s1.json';\nimport {Card} from 'react-bootstrap';\n\nclass Graph extends Component {\n    \n    handleClick = node => {\n        this.props.changeSelectedNode(node)\n    }\n    render() {\n        return (\n            <Card bg=\"light\">\n                <Card.Body style={{padding: 0}}>\n                    <ForceGraph2D\n                        width={this.props.width}\n                        height={this.props.height}\n                        graphData={DataGrafo}\n                        nodeLabel=\"title\"\n                        onNodeClick={this.handleClick}\n                    />\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default Graph;","import React, { Component } from 'react';\nimport { Card } from 'react-bootstrap'\nclass NodeInfo extends Component {\n    render() {\n        return (\n            <div>\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Informaci√≥n del nodo</Card.Title>\n                        <Card.Text>\n                            {this.props.node ? this.props.node.title : \"seleccione un nodo en el grafo.\"}\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default NodeInfo;","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Tweets from './Tweets/Tweets';\nimport Graph from './Graph';\nimport NodeInfo from './NodeInfo';\nimport TweetsBoli from './jsons/tweets-boli.json';\nimport TweetsCoca from './jsons/tweets-coca.json';\nimport TweetsPastillas from './jsons/tweets-coca.json';\nimport TweetsRitmo from './jsons/tweets-ritmo.json';\nimport LoadingOverlay from 'react-loading-overlay';\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            graphDimensions: null,\n            selectedNode: null,\n            tweetsLoaded: false\n        }\n\n        this.graphContainerRef = React.createRef();\n    }\n\n    setTweetsLoaded = () => {\n        if (!this.state.tweetsLoaded)\n            this.setState({ tweetsLoaded: true })\n    }\n    changeSelectedNode = node => {\n        this.setState({ selectedNode: node });\n    }\n\n    updateDimensions = () => {\n        this.setState({ graphDimensions: this.graphContainerRef.current ? { width: this.graphContainerRef.current.offsetWidth, height: this.graphContainerRef.current.offsetHeight } : { width: 0, height: 0 } })\n    };\n\n    componentDidUpdate = () => {\n        if (!this.state.graphDimensions && this.graphContainerRef.current)\n            this.updateDimensions()\n    }\n\n    componentDidMount() {\n        this.updateDimensions();\n        window.addEventListener('resize', this.updateDimensions);\n    }\n\n    render() {\n        return (\n            <div>\n                <LoadingOverlay\n                    active={!this.state.tweetsLoaded}\n                    spinner\n                    text='Cargando datos...'\n                >\n                </LoadingOverlay>\n                <Container>\n                    <Row className=\"Graph\" style={{ height: '40vh', marginBottom: '5vh', marginTop: '5vh' }}>\n                        <Col ref={this.graphContainerRef}>\n                            {this.state.graphDimensions ? <Graph width={this.state.graphDimensions.width} height={this.state.graphDimensions.height} changeSelectedNode={this.changeSelectedNode} /> : <></>}\n                        </Col>\n                        <Col style={{ padding: '20px' }}>\n                            <NodeInfo node={this.state.selectedNode} />\n                        </Col>\n                    </Row>\n                    <Row className=\"Tweets\" style={{ height: '40vh', marginBottom: '5vh', marginTop: '5vh' }}>\n                        <Col>\n                            <Tweets setTweetsLoaded={this.setTweetsLoaded} title=\"Boli\" tweets={TweetsBoli} />\n                        </Col>\n                        <Col>\n                            <Tweets setTweetsLoaded={this.setTweetsLoaded} title=\"Coca-Cola\" tweets={TweetsCoca} />\n                        </Col>\n                        <Col>\n                            <Tweets setTweetsLoaded={this.setTweetsLoaded} title=\"Pastillas\" tweets={TweetsPastillas} />\n                        </Col>\n                        <Col>\n                            <Tweets setTweetsLoaded={this.setTweetsLoaded} title=\"Menstruaci√≥n\" tweets={TweetsRitmo} />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Main from './Main'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}