{"version":3,"sources":["Tweets/Tweets.jsx","Graph.jsx","Main.jsx","App.js","serviceWorker.js","webpack:///./src/index.js?b635","logo.svg"],"names":["Tweets","ref","this","tweetContainerRef","props","title","ListGroup","style","overflow","height","tweets","map","tweet","index","Item","key","padding","tweetId","tweet_url","split","options","width","lang","Component","Graph","state","data","nodes","id","links","source","target","backgroundColor","graphData","Main","updateDimensions","setState","graphDimensions","graphContainerRef","current","offsetWidth","componentDidUpdate","React","createRef","window","addEventListener","Container","Row","className","Col","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d0c450fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { TwitterTweetEmbed } from 'react-twitter-embed'\nimport '../Tweet/Tweet.css'\nclass Tweets extends Component {\n\n\n    render() {\n        return (\n            <div ref={this.tweetContainerRef}>\n                <h3>{this.props.title}</h3>\n                <ListGroup style={{overflow: 'scroll', height:'50vh'}}>\n                    {this.props.tweets ? this.props.tweets.map((tweet, index) => {\n                        return <ListGroup.Item key={index} style={{padding:0}}>\n                            <TwitterTweetEmbed\n                                tweetId={tweet.tweet_url.split(\"/\")[3]}\n                                options={{ width: '100%', lang:'es'}}\n                            />\n                        </ListGroup.Item>\n                    }) : <></>}\n                </ListGroup>\n            </div>\n        );\n    }\n}\n\nexport default Tweets;","import React, { Component } from 'react';\nimport {ForceGraph2D} from 'react-force-graph';\n\nclass Graph extends Component {\n\n    state = {\n        data: {\n            nodes: [\n                {\n                    id: 0\n                },\n                {\n                    id: 1\n                },\n                {\n                    id: 2\n                },\n                {\n                    id: 3\n                },\n                {\n                    id: 4\n                },\n                {\n                    id: 5\n                },\n                {\n                    id: 6\n                },\n                {\n                    id: 7\n                },\n                {\n                    id: 8\n                },\n                {\n                    id: 9\n                }\n            ],\n            links: [\n                {\n                    source: 1, target: 0\n                },\n                {\n                    source: 2, target: 0\n                },\n                {\n                    source: 3, target: 0\n                },\n                {\n                    source: 4, target: 1\n                },\n                {\n                    source: 5, target: 3\n                },\n                {\n                    source: 6, target: 5\n                },\n                {\n                    source: 7, target: 5\n                },\n                {\n                    source: 8, target: 0\n                },\n                {\n                    source: 9, target: 0\n                }\n            ]\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <ForceGraph2D\n                    backgroundColor=\"#dddddd\"\n                    width={this.props.width}\n                    height={this.props.height}\n                    graphData={this.state.data}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Graph;","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Tweets from './Tweets/Tweets';\nimport Graph from './Graph';\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tweets: [{\n                'fullname': 'Diego Sierra',\n                'likes': 0,\n                'new_query': 'gorro AND pequeño',\n                'query': 'condon AND pequeño',\n                'text': '@AleVillafaneM xD era para ver si tenías un gorro de tela pequeño que mi hermanita nota uno',\n                'timestamp': '21-Jun-2013',\n                'user_id': 121282899,\n                'tweet_url': '/Dieguito_1456/status/347893314755907584'\n            },\n            {\n                'fullname': 'Mayo Cuello',\n                'likes': 0,\n                'new_query': 'forro AND pequeño',\n                'query': 'condon AND pequeño',\n                'text': 'IPhone 6 de 16gb dorado pequeño detalles en vacover nada q un forro… https://www.instagram.com/p/BL9S-A9gyg-69fd78zY4WVsvynbC-eTuG3iTiQ0/\\xa0…',\n                'timestamp': '24-Oct-2016',\n                'user_id': 409721398,\n                'tweet_url': '/mayocuello22/status/790639252598063104'\n            },\n            {\n                'fullname': 'Kéyla.',\n                'likes': 0,\n                'new_query': 'forro AND pequeño',\n                'query': 'condon AND pequeño',\n                'text': 'Mi celular sin forro que pequeño se siente jjjjj',\n                'timestamp': '01-Aug-2014',\n                'user_id': 287968384,\n                'tweet_url': '/KeyJaner/status/495215976313806848'\n            },\n            {\n                'fullname': 'MiLu♡',\n                'likes': 0,\n                'new_query': 'forrito AND pequeño',\n                'query': 'condon AND pequeño',\n                'text': 'El forrito lo compre porque es pitufo pequeño como yo;$',\n                'timestamp': '04-Oct-2012',\n                'user_id': 197915750,\n                'tweet_url': '/JoselinPerezO/status/253931296328392706'\n            },\n            {\n                'fullname': '❾¾⚯͛ 🤯',\n                'likes': 0,\n                'new_query': 'goma AND pequeño',\n                'query': 'condon AND pequeño',\n                'text': 'La confianza es como una goma de borrar, se hace más y más pequeño después de cada error.',\n                'timestamp': '09-Jun-2014',\n                'user_id': 823831892,\n                'tweet_url': '/Danielaa_BM21/status/475834056362295296'\n            }],\n\n            graphDimensions: null\n        }\n\n        this.graphContainerRef = React.createRef();\n    }\n\n    updateDimensions = () => {\n        this.setState({ graphDimensions: this.graphContainerRef.current ? { width: this.graphContainerRef.current.offsetWidth, height: this.graphContainerRef.current.offsetWidth } : { width: 0, height: 0 } })\n    };\n\n    componentDidUpdate = () => {\n        if (!this.state.graphDimensions && this.tweetContainerRef.current)\n            this.updateDimensions()\n    }\n\n    componentDidMount() {\n        this.updateDimensions();\n        window.addEventListener('resize', this.updateDimensions);\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row className=\"Graph\" style={{ height: '50vh' }}>\n                    <Col ref={this.graphContainerRef}>\n                        {this.state.graphDimensions ? <Graph width={this.state.graphDimensions.width} height={this.state.graphDimensions.height} /> : <></>}\n                    </Col>\n                    <Col>\n                        <Tweets title=\"boli\" tweets={this.state.tweets} />\n                    </Col>\n                </Row>\n                <Row className=\"Tweets\" style={{ height: '50vh' }}>\n                    <Col>\n                        <Tweets title=\"boli\" tweets={this.state.tweets} />\n                    </Col>\n                    <Col>\n                        <Tweets title=\"coca\" tweets={this.state.tweets} />\n                    </Col>\n                    <Col>\n                        <Tweets title=\"pastillas\" tweets={this.state.tweets} />\n                    </Col>\n                    <Col>\n                        <Tweets title=\"menstruación\" tweets={this.state.tweets} />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Main from './Main'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}